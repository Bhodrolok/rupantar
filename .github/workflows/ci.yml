name: Setup Python environment with Poetry
run-name: ${{ github.actor }}'s trigger ${{ github.event_name }}@${{ github.sha}}

on:
  push:
    branches:
      - main
      - develop
      - ci-setup
  pull_request:
  workflow_dispatch:

jobs:
  ci:
    strategy:
      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#handling-failures
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        poetry-version: ["1.7.1"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      POETRY: ${{ matrix.poetry-version }}

    name: Setup Python environment for the rupantar project, with Poetry, complete with linting & formatting
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code so the workflow can be accessed
        uses: actions/checkout@v4.1.1

      # https://github.com/actions/setup-python
      - name: Set up Python ${{ env.PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON }}

      # https://github.com/abatilo/actions-poetry
      - name: Set up Poetry ${{ env.POETRY }}
        uses: abatilo/actions-poetry@v2.3.0
        with:
          poetry-version: ${{ env.POETRY }}

      # Cache virtual environment
      - uses: actions/cache@v3.3.2
        name: Define a cache for the venv based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install main & dev project dependencies
        run: poetry install --with dev

      - name: Ruff lint & format
        run: |
          poetry run ruff check . -v
          poetry run ruff format . -v

      - name: Black
        run: poetry run black . -v