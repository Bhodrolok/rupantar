name: Test rupantar
run-name: ${{ github.actor }}'s trigger ${{ github.event_name }}@${{ github.sha}}

on:
    push:
        branches:
            - main
            - develop
    pull_request:
    workflow_dispatch:

jobs:
    ci:
        name: Setup testing for rupantar and upload coverage results to CodeCov
        strategy:
            # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#handling-failures
            fail-fast: false
            matrix:
                python-version: ["3.10", "3.11", "3.12"]
                poetry-version: ["1.7.1"]
                os: [ubuntu-latest, macos-latest, windows-latest]
        env:
            OS: ${{ matrix.os }}
            PYTHON: ${{ matrix.python-version }}
            POETRY: ${{ matrix.poetry-version }}
            CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout code so the workflow can be accessed
              uses: actions/checkout@v4.1.1

            - name: Setup Python${{ env.PYTHON }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON }}

            - name: Setup Poetry${{ env.POETRY}}
              uses: abatilo/actions-poetry@v2.3.0
              with:
                  poetry-version: ${{ env.POETRY }}

            - name: Cache virtual environment
              uses: actions/cache@v3.3.2
              with:
                  path: ./.venv
                  key: venv-${{ hashFiles('poetry.lock') }}

            - name: Install main & test project dependencies
              run: poetry install --with test

            - name: Run tests & generate coverage report
              run: pytest --cov=./src/ --cov-report=xml:./tests/reports/coverage.xml

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                token: ${{ env.CODECOV_TOKEN }}
                directory: ./tests/coverage/reports/
                env_vars: ${{ env.OS }}, ${{ env.PYTHON }}
                fail_ci_if_error: true
                # files: ./coverage1.xml,./coverage2.xml,!./cache
                # flags: unittests
                name: codecov-rupantar
                verbose: true
